{"version":3,"sources":["utils/API.js","components/SearchBox.js","components/TableData.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","SearchBox","props","className","onChange","handleInputChange","value","id","type","name","list","placeholder","onClick","handleSearch","TableData","sortByName","results","map","result","key","login","uuid","src","picture","medium","alt","first","last","cell","href","email","format","dob","date","Container","state","search","employees","filteredEmployees","order","filtereds","sorteds","sort","a","b","console","log","setState","event","UserInput","target","filter","employee","toLowerCase","indexOf","employeeSearch","API","then","res","data","catch","err","preventDefault","alert","includes","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab926c6d.chunk.js","sourcesContent":["import axios from \"axios\";\r\nexport default {\r\n    // Gets all users\r\n    getUsers: function () {\r\n        return axios.get(\"https://randomuser.me/api/?results=300&nat=us\");\r\n    }\r\n};","import React from \"react\"\r\nimport \"./style.css\";\r\n\r\nfunction SearchBox(props) {\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n\r\n\r\n            <header className=\"z-depth-3 col s12\" >\r\n                <div className=\"row\">\r\n                    {/* <header className=\" > */}\r\n\r\n                    <div className=\"col s6\">\r\n\r\n\r\n\r\n                        <h3 className=\"right-align headerText\">Associate Directory</h3>\r\n                        {/* <h6 className=\"center-align smallerHeaderText\">Use the box down below to narrow your search</h6> */}\r\n\r\n                    </div>\r\n                    <div className=\"col s6 \">\r\n\r\n                        <div className=\"col s6 inputAndButton right-align \">\r\n\r\n                            <input\r\n                                onChange={props.handleInputChange}\r\n                                value={props.value}\r\n                                id=\"employees\"\r\n                                type=\"text\"\r\n                                name=\"search\"\r\n                                list=\"employee\"\r\n                                className=\" inputBox  \"\r\n                                placeholder=\"Search by name\" />\r\n\r\n\r\n                        </div>\r\n                        <div className=\"col m4\">\r\n\r\n\r\n                            <button\r\n                                type=\"submit\"\r\n                                value=\"\"\r\n                                className=\" btn z-depth-2 waves-effect  searchBttn\"\r\n                                onClick={props.handleSearch} >Search</button>\r\n                        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </div>\r\n                    {/* </header > */}\r\n                </div>\r\n            </header>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React from \"react\";\r\nimport Moment from 'react-moment';\r\n\r\nimport \"./style.css\";\r\n\r\nfunction TableData(props) {\r\n      return (\r\n        <table className=\"tableEmployee \">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th onClick={props.sortByName}>Name</th>\r\n                    <th>Phone</th>\r\n                    <th>E-mail</th>\r\n                    <th>DOB</th>\r\n                </tr>\r\n            </thead>\r\n\r\n            <tbody className= \"\">\r\n                {props.results.map(result => (\r\n                    <tr className=\"table\" key={result.login.uuid}>\r\n                     \r\n\r\n                        <td> <img className=\"\r\n                        \"src={result.picture.medium} alt=\"\" /></td>\r\n                        \r\n                        <td>{result.name.first + \" \" + result.name.last}  </td>\r\n\r\n                        <td>{result.cell}</td>\r\n                        <td className=\"email\"><a href={result.email}>{result.email}</a></td>\r\n                        <td><Moment format=\"MM/DD/YYYY\">{result.dob.date}</Moment></td>\r\n\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table >\r\n    )\r\n\r\n}\r\n\r\nexport default TableData","import API from \"../utils/API\";\r\nimport React, { Component } from \"react\"\r\nimport SearchBox from \"./SearchBox\"\r\n// import SearchBox from \"./SearchBox\"\r\nimport TableData from \"./TableData\"\r\nimport \"./style.css\";\r\n\r\nclass Container extends Component {\r\n\r\n    // Setting the component's initial state\r\n    //search starts as an empty string\r\n    //employess and filteredEmployess are empty arrays because that it's the structure of the data we'll be working with\r\n    //order it's to reference the order that the employees are. By defaltu they come randonly and the first click will trigger then to be in asc order\r\n    state = {\r\n        search: \"\",\r\n        employees: [],\r\n        filteredEmployees: [],\r\n        order: \"\"\r\n\r\n    };\r\n\r\n    // this is the initialization, what do you want the page to display when page it's first loaded\r\n    componentDidMount() {\r\n        API.getUsers().then(res => this.setState({\r\n            employees: res.data.results,\r\n            filteredEmployees: res.data.results\r\n        })).catch(err => console.log(err))\r\n    }\r\n\r\n    //if \"name\" it's clicked employee are shown by asc/desc order\r\n\r\n    sortByName = () => {\r\n        const filtereds = this.state.filteredEmployees;\r\n        if (this.state.order === \"asc\") {\r\n            const sorteds = filtereds.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1)\r\n            console.log(sorteds)\r\n\r\n            this.setState({\r\n                filteredEmployees: sorteds,\r\n                order: \"desc\"\r\n            })\r\n        } else {\r\n\r\n            const sorteds = filtereds.sort((a, b) => (a.name.first > b.name.first) ? -1 : 1)\r\n            console.log(sorteds)\r\n\r\n            this.setState({\r\n                filteredEmployees: sorteds,\r\n                order: \"asc\"\r\n            })\r\n\r\n        }\r\n    }\r\n    //when input is changing it will dynamically show the associates names that match in the screen\r\n    handleInputChange = event => {\r\n\r\n        const employees = this.state.employees;\r\n        const UserInput = event.target.value;\r\n        const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().indexOf(UserInput.toLowerCase()) > -1\r\n        )\r\n        this.setState({\r\n            //change the state of  filteredEmployes now it holds all the employes that matches users\r\n            // search and will be passed down in this state\r\n\r\n            filteredEmployees,\r\n\r\n        });\r\n\r\n\r\n    };\r\n\r\n\r\n    //API call triggered when page it's refreshed and  when application it's loaded \r\n    employeeSearch = () => {\r\n        API.getUsers()\r\n            .then(res => this.setState({\r\n\r\n                //change their both states to hold all the data from the API call(all employess) and will be passed down trough props like that\r\n                //employee will remain the same and filteredEmployes will be changed and passed down during application's life. Employee will always hold all employess.\r\n                filteredEmployees: res.data.results,\r\n                employees: res.data.results\r\n            }))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    //when button search it's clicked\r\n    handleSearch = event => {\r\n        event.preventDefault();\r\n        if (!this.state.search) {\r\n            alert(\"Enter a name\")\r\n        }\r\n        const { employees, search } = this.state;\r\n\r\n        //filters the object looking for the value that matches the value entered in the input box by the user  (search.this.state)\r\n        const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().includes(search.toLowerCase()));\r\n\r\n        this.setState({\r\n            filteredEmployees\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n\r\n                <SearchBox\r\n                    employee={this.state.employees}\r\n                    handleSearch={this.handleSearch}\r\n                    handleInputChange={this.handleInputChange} />\r\n                <TableData results={this.state.filteredEmployees}\r\n                    sortByName={this.sortByName}\r\n\r\n                />\r\n            </div >\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Container","import React from 'react';\r\nimport Container from \"./components/Container\"\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Container />\r\n\r\n  )\r\n}\r\n\r\nexport default App;\r\n ","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}